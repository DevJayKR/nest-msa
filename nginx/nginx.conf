user nginx;
worker_processes auto;

error_log /var/log/nginx/error.log warn;
pid       /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    # nginx를 업스트림 서버로 사용하여 -> 요청을 각 server로 흘려줌
    upstream api_user {
        # 로드밸런싱
        # nginx load balancing method중 least_conn method

        # https://velog.io/@fredkeemhaus/Nginx%EB%A1%9C-%EB%A1%9C%EB%93%9C%EB%B0%B8%EB%9F%B0%EC%8B%B1-%ED%95%98%EA%B8%B0-z9vu37qj

        # 가중치를 고려하면서 연결수가 가장 적은 서버를 선택해서 요청을 분배해줌
        least_conn;
        server user_api_01:3001;
        server user_api_02:3002;
        server user_api_03:3003;
    }

    upstream api_product {
        server product_api:4001;
    }

    server {
        listen 80;
        server_name localhost;

        location /user/ {
            proxy_pass http://api_user/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwared-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /product/ {
            proxy_pass http://api_product/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwared-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

    }
}